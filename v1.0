let drop = 0
let height = 0
let delay = 0
let x = 0
let score = 0
let y = 0
let level = 0
let init = 0
let posn = 0
// Reset the game
input.onGesture(Gesture.Shake, () => {
    basic.clearScreen()
    posn = 2
    init = 1
    level = 5
    score = 10
    basic.showString("Level")
    basic.showNumber(level)
})
input.onButtonPressed(Button.AB, () => {
    if (init == 1) {
        basic.clearScreen()
        y = 0
        for (let i = 0; i <= 4; i++) {
            x = 0
            for (let j = 0; j <= 4; j++) {
                led.plot(x, y)
                x += 1
            }
            basic.pause(500)
            y += 1
            basic.clearScreen()
        }
        init = 0
    }
})
input.onButtonPressed(Button.A, () => {
    if (init == 1) {
        level = Math.max(1, level - 1)
        basic.showNumber(level)
    } else {
        led.unplot(posn, 4)
        posn = Math.max(0, posn - 1)
        led.plot(posn, 4)
    }
})
input.onButtonPressed(Button.B, () => {
    if (init == 1) {
        level = Math.min(9, level + 1)
        basic.showNumber(level)
    } else {
        led.unplot(posn, 4)
        posn = Math.min(4, posn + 1)
        led.plot(posn, 4)
    }
})
// Set the 'paddle' in the middle of the screen
posn = 2
// Send to 'initiate' mode
init = 1
// Default difficulty level is 5
level = 5
// Initialise Score to 10 points
score = 10
basic.showString("Level")
basic.showNumber(level)
// Keep waiting while we're in initiate 'mode'
while (init == 1) {
    basic.pause(1)
}
basic.clearScreen()
// The difficulty level sets the speed that the drop
// moves down the screen.  Higher difficulty = smaller
// pause
delay = (10 - delay) * 30
led.plot(posn, 4)
// Keep looping while we've not won or lost
while (score > 0 && score < 20 && init == 0) {
    // Start the drop at the top of the screen
    height = 0
    // Pick a random location to start the drop off from
    drop = Math.random(5)
    // Keep plotting the drop while it's falling
    while (height <= 4) {
        led.plot(drop, height)
        basic.pause(delay)
        led.unplot(drop, height)
        height += 1
    }
    // When the drop hits the bottom of the screen, check
    // to see if it's in the same position as the 'paddle'
    if (posn == drop) {
        score += 1
    } else {
        score += -1
    }
    // Replot the 'paddle'
    led.plot(posn, 4)
    basic.pause(delay)
}
if (score == 0) {
    basic.showIcon(IconNames.Sad)
}
if (score == 20) {
    basic.showIcon(IconNames.Happy)
}
